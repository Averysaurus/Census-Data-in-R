library(tmap)
tmap_mode("view") # set mode to interactive
poverty_map <- tm_shape(sf_poor_summed) +
tm_polygons(col="pct_below_pov")
poverty_map
sf_poor_cb <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
summary_var = "C17002_001",
year = 2016,
state="CA",
county="San Francisco",
geometry=TRUE,
cb = TRUE)     # THIS IS THE DEFAULT!
sf_poor_tl <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
summary_var = "C17002_001",
year = 2016,
state="CA",
county="San Francisco",
geometry=TRUE,
cb = FALSE)  # Fetching the TIGER/Line data
tm_shape(sf_poor_tl) +
tm_borders() +
tm_shape(sf_poor_cb) +
tm_borders(col="red")
sf_poor_2017 <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
year = 2017,
state="CA",
summary_var = "C17002_001", # Est of num people - denom
county="San Francisco",
geometry=T)
head(sf_poor_2017)
View(sf_poor)
sf_poor <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
year = 2016,
state="CA",
summary_var = "C17002_001", # Est of num people - denom
county="San Francisco",
geometry=T)
plot(sf_poor['estimate'])
sf_poor
head(sf_poor)
head(sf_poor[1:])
head(sf_poor[1:,])
View(sf_poor)
library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
source('../../keys/census_api_key.R')
census_api_key(my_census_api_key)
setwd("~/Documents/Dlab/workshops/2019/rCensus_workshop")
dir()
vars2010 <- load_variables(year=2010,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = TRUE)     # Whether to save fetched data locally
View(vars2010)
pop2010 <- get_decennial(geography = "state",   # census tabulation unit
variables = "P001001", # variable(s) of interest
year = 2010)           # census year
View(pop2010)
# Fetch the 2000 pop data
pop2000 <- get_decennial(geography = "state", variables = "P001001", year = 2000)
# Take a look (plot if time)
pop2000
vars2000 <- load_variables(year=2000, dataset = 'sf1', cache = T)
View(vars2000)
state_pop2010 <- get_decennial(geography = "state", # census tabulation unit
variables = "P001001",     # variables of interest
year = 2010,               # census year
state=c("CA","OR","WA"))   # Filter by states of interest
View(pop2010)
View(state_pop2010)
co_pop2010 <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010)
View(co_pop2010)
calco_pop2010 <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
county="CA")
calco_pop2010 <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
county=c("CA"))
calco_pop2010 <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c("CA"))
View(calco_pop2010)
View(pop2010)
calco_pop2010 <- get_decennial(geography = c("state","county"),   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c("CA"))
calco_pop2010 <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c("CA"))
View(calco_pop2010)
caltracts_pop2010 <- get_decennial(geography = "tract",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c("CA"))
View(calco_pop2010)
caltracts_pop2010 <- get_decennial(geography = "tract",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c("CA"),
county=c("001"))
View(calco_pop2010)
View(calco_pop2010)
View(caltracts_pop2010)
caltracts_pop2010 <- get_decennial(geography = "tract",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c("CA"),
county=c("Alameda County"))
get_decennial(geography = "state", variables = "P001001", year = 2010)
get_decennial(geography = "state", variables = c(pop10="P001001"), year = 2010)
get_decennial(geography = "state", variables = c(pop00="P001001"), year = 2010,
output="wide")
options(tigris_class = "sf")      # SP is the default format returned by tigris
options(tigris_use_cache = TRUE)  # Save retrieved data locally
Sys.getenv('TIGRIS_CACHE_DIR')
dir(Sys.getenv('TIGRIS_CACHE_DIR') )
pop2010geo <- get_decennial(geography = "state",
variables = c(pop10="P001001"),
year = 2010,
output="wide",
geometry=TRUE) # Fetch geometry with the data for mapping
View(pop2010geo)
pop2010geo
plot(pop2010geo$geometry)
plot(pop2010geo)
pop2010geo_shifted <- get_decennial(geography = "state",
variables = c(pop10="P001001"),
output="wide",
year = 2010,
geometry=TRUE,
shift_geo=TRUE)
plot(pop2010geo_shifted$geometry)
plot(pop2010geo_shifted['pop10'])
ggplot(pop2010geo_shifted, aes(fill = pop10)) +
geom_sf()
west_pop10 <- get_decennial(geography = "county",
variables =  "P001001",
year = 2010,
state=c('CA','OR','NV',"AZ"),
geometry=T)
west_pop10['P001001']
plot(west_pop10['P001001'])
plot(west_pop10['P001001'])
View(west_pop10)
plot(west_pop10['P001001'])
plot(west_pop10['value'])
alco_pop10 <- get_decennial(geography = "tract",
variables = "P001001",
year = 2010,
state='CA',
county='Alameda',
geometry=T)
plot(alco_pop10['variable'])
plot(alco_pop10['variable'])
View(alco_pop10)
plot(alco_pop10['value'])
acs2016vars <- load_variables(year=2016, dataset = 'acs5', cache = T)
View(acs2016vars)
sf_poor <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
year = 2016,
state="CA",
summary_var = "C17002_001", # Est of num people - denom
county="San Francisco",
geometry=T)
View(sf_poor)
plot(sf_poor['value'])
View(sf_poor)
plot(sf_poor['estimate'])
sf_poor <- subset(sf_poor, summary_est > 0)
plot(sf_poor['estimate'])
sf_poor <- sf_poor %>%
mutate(pct = 100 * (estimate / summary_est))
head(sf_poor, 3)
sf_poor_summed <- sf_poor %>%
select(GEOID, estimate, pct, geometry) %>%
group_by(GEOID) %>%
summarise(count_below_pov = sum(estimate),
pct_below_pov = sum(pct))
View(sf_poor_summed)
tigris?
tigris?
?tigris
cache = TRUE)     # Whether to save fetched data locally
??tigris
options(tigris_year=2015)
?tracts
tracts <- tracts(c("WA","OR"), cb=TRUE, year=2015)
plot(tracts$geometry)
head(tracts)
tracts_waor <- tracts(c("WA","OR"), cb=T, year=2015)
#
?tracts
tracts_waor <- tracts(c("WA","OR"), county=NULL, cb=T, year=2015)
tracts_waor <- tracts("WA", county=NULL, cb=T, year=2015)
library(tidycensus)
vt <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "VT",
year = 2018)
vt <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "VT",
year = 2016)
vt
vt <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "VT",
year = 2016)
?get_acs
vt <- get_acs(geography = "zcta",
variables = c(medincome = "B19013_001"),
state = "VT",
year = 2016)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
read.table('/home/drew/Desktop/stuff/api_keys/census.txt')
read.table('/home/drew/Desktop/stuff/api_keys/census.txt')[1,1]
as.character(read.table('/home/drew/Desktop/stuff/api_keys/census.txt')[1,1])
census_api_key(as.character(read.table('/home/drew/Desktop/stuff/api_keys/census.txt')[1,1]))
census_api_key(as.character(read.table('/home/drew/Desktop/stuff/api_keys/census.txt')[1,1]), intall=TRUE)
census_api_key(as.character(read.table('/home/drew/Desktop/stuff/api_keys/census.txt')[1,1]), install=TRUE)
census_api_key(as.character(read.table('/home/drew/Desktop/stuff/api_keys/census.txt')[1,1]), install=TRUE, overwrite=TRUE)
census_api_key
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
setwd('../Census-Data-in-R/')
?load_variables
load_variables(2016, 'acs3')
load_variables(2013, 'acs3')
vars2010 <- load_variables(year=2010,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = TRUE)     # Whether to save fetched data locally
vars_2010
vars2010
View(vars2010)
?get_decennial
get_decennial(variables='P001001', geography='state', year=2015)
get_decennial(variables='P001001', geography='state', year=2010)
get_decennial(variables=c('P001001', 'P002001, geography='state', year=2010)
get_decennial(variables=c('P001001', 'P002001'), geography='state', year=2010)
get_decennial(variables=c('P001001', 'P017H002'), geography='state', year=2010)
out = get_decennial(variables=c('P001001', 'P017H002'), geography='state', year=2010)
as.data.frame(out)
get_decennial(variables='P001001', geography='state', year=2010)
View(get_decennial(variables='P001001', geography='state', year=2010))
knitr::opts_chunk$set(echo = TRUE)
pop_plot<- ggplot(data=pop2010, aes(x=reorder(NAME,value), y=value/1000000)) +
geom_bar(stat="identity") + coord_flip() +
theme_minimal() +
labs(title = "2010 US Population by State") +
xlab("State") +
ylab("in millions")
pop2010 <- get_decennial(geography = "state",   # census tabulation unit
variables = "P001001", # variable(s) of interest
year = 2010)           # census year
pop_plot<- ggplot(data=pop2010, aes(x=reorder(NAME,value), y=value/1000000)) +
geom_bar(stat="identity") + coord_flip() +
theme_minimal() +
labs(title = "2010 US Population by State") +
xlab("State") +
ylab("in millions")
pop_plot
pop_plot
pop2010 <- get_decennial(geography = "state",   # census tabulation unit
variables = "P001001", # variable(s) of interest
year = 2000)           # census year
pop2010 <- get_decennial(geography = "state",   # census tabulation unit
))))))
pop2010
pop2010 <- get_decennial(geography = "state",   # census tabulation unit
variables = "P001001", # variable(s) of interest
year = 2010)           # census year
vars2010 <- load_variables(year=2000,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = TRUE)     # Whether to save fetched data locally
vars2000 <- load_variables(year=2000,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = TRUE)     # Whether to save fetched data locally
## Fetch population by **tract** for California.
cal_pop2010_tracts <- get_decennial(geography = "tract",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c('CA'))
cal_pop2010_tracts
## Fetch population by **tract** for all states.
pop2010_tracts <- get_decennial(geography = "tract",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010)
pop2010_tracts  ## DOES THIS WORK?
tract_pop2010 <- get_decennial(geography = "tract",   # census tabulation unit
variables = "P001001",       # variable of interest
year = 2010,                 # census year
state="CA",                  # limit to state of California
county=c("Alameda","Contra Costa"))  # and only these counties
# County FIPS Codes for
# Alameda, SF, Contra Costa, Marin County, Napa,
# San Mateo, Santa Clara,  Solano,  Sonoma, santa cruz
nine_counties <- c("001", "075", "013", "041", "055", "081", "085", "095", "097")
#  population by **county** for Alameda County, California
alco_pop2010 <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c('CA'),
county=c('Alameda County'))
alco_pop2010
# County FIPs Codes for
# Alameda, SF, Contra Costa, Marin County, Napa,
# San Mateo, Santa Clara,  Solano,  Sonoma, santa cruz
nine_counties <- c("001", "075", "013", "041", "055", "081", "085", "095", "097")
bayarea_pop2010_tract <- get_decennial(geography = "tract",   # census tabulation unit
variables = "P001001",       # variable of interest
year = 2010,                 # census year
state="CA",                  # limit to state of California
county=nine_counties)  # and only these counties
bayarea_pop2010_tract
#urban rural pop for 3 counties
ur_pop10 <- get_decennial(geography = "county",  # census tabulation unit
variables = c(urban="P002002",rural="P002005"),
year = 2010,
summary_var = "P002001",  # The denominator
state='CA',
county=c("Napa","Sonoma","Mendocino"))
ur_pop10
# Calculate the percent of population that is Urban or Rural
ur_pop10 <- ur_pop10 %>%
mutate(pct = 100 * (value / summary_value))
ur_pop10 # Take a look
myplot <- ggplot(data = ur_pop10,
mapping = aes(x = NAME, fill = variable,
y = ifelse(test = variable == "urban",
yes = -pct, no = pct))) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = abs, limits=c(-100,100)) +
labs(title="Urban & Rural Population in Wine Country",
x="County", y = " Percent of Population", fill="") +
coord_flip()
myplot
alco_pop10 <- get_decennial(geography = "tract", # Census tabulation unit
table =  "P002",      # Table of urban & rural population counts
year = 2010,          # Decennial census year
state='CA',           # Filter state
county="Alameda")     # Filter county
unique(alco_pop10$variable) # What and how many unique vars in table?
head(alco_pop10,3)  # Take a look at output
get_decennial(geography = "state", variables = "P001001",
year = 2010)
get_decennial(geography = "state", variables = c(pop10="P001001"),
year = 2010)
get_decennial(geography = "state", variables = c(pop10="P001001"),
year = 2010, output="wide")
head(get_decennial(geography = "state", variables = "P001001",
year = 2010), 2)
head(get_decennial(geography = "state", variables = c(pop10="P001001"),
year = 2010), 2)
head(get_decennial(geography = "state", variables = c(pop00="P001001"),
year = 2010, output="wide"), 2)
pop2000 <- get_decennial(geography = "state",
variables = c(pop00="P001001"),
year = 2000, output="wide")
pop2010 <- get_decennial(geography = "state",
variables = c(pop10="P001001"),
year = 2010, output="wide")
pop2000_2010 <- pop2000 %>% merge(pop2010, by="NAME") %>%
select(NAME, pop00, pop10)
head(pop2000_2010,3)
# Tigris options - used by tidycensus
options(tigris_class = "sf")      # SP is the default format returned by tigris
options(tigris_use_cache = TRUE)  # Save retrieved data locally
# Check the location of the tigris cached data
Sys.getenv('TIGRIS_CACHE_DIR')
# Set it
tigris_cache_dir("~/Documents/gis_data/census")  # Folder for local data
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
# Set it
tigris_cache_dir("../tigris_census_data/")  # Folder for local data
# Set it
tigris_cache_dir("../tigris_census_data/")  # Folder for local data
library(tigris)
# Check the location of the tigris cached data
Sys.getenv('TIGRIS_CACHE_DIR')
# Set it
tigris_cache_dir("~/Documents/gis_data/census")  # Folder for local data
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
readRenviron('~/.Renviron')
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
# Set it
tigris_cache_dir("../tigris_census_data/")  # Folder for local data
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
readRenviron('~/.Renviron')
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
pop2010geo <- get_decennial(geography = "state",
variables = c(pop10="P001001"),
year = 2010,
output="wide",
geometry=TRUE) # Fetch geometry with the data for mapping
pop2010geo
plot(pop2010geo)
calpop10 = plot(get_decennial(geography='county', state='CA', year=2010, geometry=T, variable='P001001', format='wide')$P001001)
calpop10 = plot(get_decennial(geography='county', state='CA', year=2010, geometry=T, variable='P001001', output='wide')$P001001)
calpop10 = plot(get_decennial(geography='county', state='CA', year=2010, geometry=T, variable='P001001', output='wide'))
calpop10 = get_decennial(geography='county', state='CA', year=2010, geometry=T, variable='P001001', output='wide')
calpop10$P001001
plot(calpop10['P001001'])
baypop10 = get_decennial(geography='tract', state='CA', county=c('Alameda', 'Contra Costa', 'Solano', Napa', 'Marin', 'San Francisco', 'San Mateo', 'Santa Clara', 'San Benito', 'Sonoma'), year=2010, variable=c('pop
baypop10 = get_decennial(geography='tract', state='CA', county=c('Alameda', 'Contra Costa', 'Solano', Napa', 'Marin', 'San Francisco', 'San Mateo', 'Santa Clara', 'San Benito', 'Sonoma'), year=2010, variable=c('pop'='P001001'), geometry=T, output='wide')
baypop10 = get_decennial(geography='tract', state='CA', county=c('Alameda', 'Contra Costa', 'Solano', Napa', 'Marin', 'San Francisco', 'San Mateo', 'Santa Clara', 'San Benito', 'Sonoma'), year=2010, variable=c(pop='P001001'), geometry=T, output='wide')
baypop10 = get_decennial(geography='tract', state='CA', county=c('Alameda', 'Contra Costa', 'Solano', 'Napa', 'Marin', 'San Francisco', 'San Mateo', 'Santa Clara', 'San Benito', 'Sonoma'), year=2010, variable=c('pop'='P001001'), geometry=T, output='wide')
plot(baypop10['pop'])
tm_shape(baypop10) + tm_polygon(col='pop')
library(tmap)
tm_shape(baypop10) + tm_polygon(col='pop')
tm_shape(baypop10) + tm_polygons(col='pop')
ttm()
tm_shape(baypop10) + tm_polygons(col='pop')
baypop10
tm_shape(baypop10) + tm_polygons(col='pop', popup_vars=c(
'pop', 'NAME'))
tm_shape(baypop10) + tm_polygons(col='pop', alpha=0.5)
sf_rented <- get_decennial(geography = "tract",  # census tabulation unit
variables =  "H004004",
year = 2010,
summary_var = "H004001",  # Total Urban - the denominator
state='CA',
county='San Francisco',
geometry=T)
sf_pct_rented <- sf_rented[sf_rented$value > 0,] %>%
mutate(pct = 100 * (value / summary_value))
plot(sf_pct_rented['pct'])
acs2016vars <- load_variables(year=2018, dataset = 'acs5', cache = T)
acs2018vars = acs2016vars
View(acs2018vars)
?get_acs
acs2016vars <- load_variables(year=2016, dataset = 'acs5', cache = T)
View(acs2016vars)
sf_poor <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
year = 2016,
state="CA",
summary_var = "C17002_001", # Est of num people - denom
county="San Francisco",
geometry=T)
sf_poor
# What are we mapping?
plot(sf_poor['estimate'])
# Remove census tracts that have no people!
sf_poor <- subset(sf_poor, summary_est > 0)
# What are we mapping?
plot(sf_poor['estimate'])
sf_poor <- sf_poor %>%
mutate(pct = 100 * (estimate / summary_est))
head(sf_poor, 3)
sf_poor_summed <- sf_poor %>%
select(GEOID, estimate, pct, geometry) %>%
group_by(GEOID) %>%
summarise(count_below_pov = sum(estimate),
pct_below_pov = sum(pct))
head(sf_poor_summed)
plot(sf_poor_summed['count_below_pov'])
plot(sf_poor_summed['pct_below_pov'])
tm_shape(sf_poor_summed) + tm_polygons(col='pct_below_pov', alpha=0.5)
sf_poor_2017 <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
year = 2017,
state="CA",
summary_var = "C17002_001", # Est of num people - denom
county="San Francisco",
geometry=T)
head(sf_poor_2017)
sf_poor_cb <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
summary_var = "C17002_001",
year = 2016,
state="CA",
county="San Francisco",
geometry=TRUE,
cb = TRUE)     # THIS IS THE DEFAULT!
## Fetch Detailed TIGER/Line Geometry
```{r}
sf_poor_tl <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
summary_var = "C17002_001",
year = 2016,
state="CA",
county="San Francisco",
geometry=TRUE,
cb = FALSE)  # Fetching the TIGER/Line data
tm_shape(sf_poor_tl) + tm_borders() +
tm_shape(sf_poor_cb) + tm_borders(col="red")
